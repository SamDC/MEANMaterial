"use strict";var ApplicationConfiguration=function(){var applicationModuleName="material",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.utils","ngMaterial"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.module(ApplicationConfiguration.applicationModuleName).config(["$mdThemingProvider",function($mdThemingProvider){$mdThemingProvider.theme("default").primaryPalette("green").accentPalette("light-green")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("users"),angular.module("core").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Home","core","dropdown","/","home"),Menus.addMenuItem("topbar","Page 1","core","dropdown","/page1","arrow_forward")}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("page1",{url:"/page1",templateUrl:"modules/core/views/page1.client.view.html"}).state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","$location","Authentication","Menus",function($scope,$location,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.go=function(path){$location.path(path)}}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").controller("Page1clientviewcontrollerController",["$scope",function($scope){}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,icon,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender,icon:icon}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("socialAccounts",{url:"/settings/accounts/social",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"}).state("editAccountsAdmin",{url:"/settings/accounts/:userId/edit/admin",templateUrl:"modules/users/views/settings/edit-profile-admin.client.view.html"}).state("listAccounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/manage-user-accounts.client.view.html"}).state("createAccounts",{url:"/settings/accounts/create",templateUrl:"modules/users/views/settings/create-user-accounts.client.view.html"}).state("resetAccounts",{url:"/settings/accounts/reset/:userId",templateUrl:"modules/users/views/settings/reset-user-accounts.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$window","$stateParams","$http","$location","Users","Authentication","$mdDialog",function($scope,$window,$stateParams,$http,$location,Users,Authentication,$mdDialog){$scope.user=Authentication.user,$scope.go=function(path){$location.path(path)},$scope.user||$location.path("/signin"),$scope.user.forcePasswordChange===!0&&$location.path("/settings/password"),$scope.pageSize=10,$scope.sortType="username",$scope.sortReverse=!1,$scope.selectedRow="",$scope.setSelectedRow=function(selectedRow){$scope.selectedRow!==selectedRow?$scope.selectedRow=selectedRow:$scope.selectedRow=void 0},$scope.find=function(){$scope.users=Users.user.query()},$scope.$watchCollection("updateUser",function(newValue){void 0!==newValue&&($scope.selectedRow=newValue[0],console.log($scope.selectedRow))}),$scope.findOne=function(){$scope.updateUser=Users.user.query({userId:$stateParams.userId})},$scope.createAccount=function(){$scope.success=$scope.error=null,$http.post("/auth/create",$scope.credentials).success(function(response){$scope.success=!0,$location.path("/settings/accounts")}).error(function(response){$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null;var user=$scope.selectedRow;$http.post("/settings/accounts/reset/"+user._id,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,$location.path("/settings/accounts")}).error(function(response){$scope.error=response.message})},$scope.remove=function(user){var removeUserAccount=user,confirm=$mdDialog.confirm().parent(angular.element(document.body)).title("Would you like to delete "+user.username+"?").content("Confirm you wish to carry out this operation").ariaLabel("Delete").ok("Please do it!").cancel("No my mistake");$mdDialog.show(confirm).then(function(){removeUserAccount.$remove(function(){$location.path("/settings/accounts");for(var i in $scope.users)$scope.users[i]===removeUserAccount&&$scope.users.splice(i,1)})},function(){$scope.alert="You decided to keep "+user.username})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users.updateUser($scope.selectedRow);user.$update(function(response){$scope.success=!0,$location.path("/settings/accounts")},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.update=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users.profile($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){Authentication.user=response.user,$scope.success=!0,$scope.passwordDetails=null,$location.path("/pilots")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return{profile:$resource("users",{},{update:{method:"PUT"}}),user:$resource("settings/accounts/:userId",{userId:"@_id"},{update:{method:"PUT"}}),updateUser:$resource("/settings/accounts/edit/admin/:userId",{userId:"@_id"},{update:{method:"POST"}})}}]);